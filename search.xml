<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>关于</title>
      <link href="//about/"/>
      <url>//about/</url>
      
        <content type="html"><![CDATA[<p>欢迎光临来到本小站~</p><p>这里是细粒丁の个人博客哦~</p><hr><h2 id="先介绍下自己吧"><a href="#先介绍下自己吧" class="headerlink" title="先介绍下自己吧~"></a>先介绍下自己吧~</h2><p>这里细粒丁，坐标广东广州，是个男孩纸~</p><p>昂有很多个名字哦，嗯…有… 细粒丁、来自火星の细粒丁、女娲&amp;兔兔</p><p>关于我的称呼还挺多的，比如：细粒丁、粒粒、丁丁、兔兔 ……</p><p>至于为什么嘛。。。呃…本兔也不知道呢！</p><h3 id="技术方面嘛"><a href="#技术方面嘛" class="headerlink" title="技术方面嘛"></a>技术方面嘛</h3><p>目前还是个小白了啦~<br>玩前端比较多，之前玩的小程序，然后就玩了会儿uni-app（Vue），现在就搞搞博客这样咯~</p><hr><h2 id="再说说这个博客"><a href="#再说说这个博客" class="headerlink" title="再说说这个博客"></a>再说说这个博客</h2><p>建个人博客是从我刚学前端没多久，就想做的一件事了啦，因为自己有个炫酷的网站真的好像挺帅气的。</p><p>当时刚开始接触三件套，就想着 要不就建一个静态的吧，把内容都写死在html里不就好了，当时真的挺天真的~</p><p>后来到了暑期，玩了小程序之后，技术有个小阶梯的飞跃吧，后面再学Vue还是挺容易的，然后就想，要不建个动态的吧，就用Vue！这也就是这个博客的初态。</p><p>我大概已经构思好了怎么用Vue来搭建了，然后在我做完两三个页面之后，发现问题了……虽然说动态是好，完整搭出来可能和做一个完整小程序差不多，但…真的有这个必要吗？一个博客最多就是像个朋友圈一样，能实时展示最新的消息，但好像没这个必要：</p><ol><li>首先是时效性。博客只是像单纯的写文章、写日记、做笔记差不多，并不需要很高的时效性，有些内容迟一天发和早一天发，甚至可以说没影响</li><li>资源问题。如果用Vue，从前端-云开发（云函数+云数据库），前端可以挂静态托管，但后端的资源消耗会很大。我做过小程序，如果所有服务都通过云函数调用获取，资源都存储在云存储和云数据库中，这个每天或是每个月的消耗还是挺大的，最起码免费的不够用。</li><li>管理问题。动态的可以说使用方便，但需要有人去管理，管理的成本也不少，一旦说哪一环出现问题了，都要自己去维护，对于我一个学生党来说挺花时间的。相反静态就不怎么需要维护了，放着就好了……</li></ol><p>所以就想到了用hexo，直接打包成静态的发布，维护小、成本低…….就它了！</p><hr><h2 id="关于本站"><a href="#关于本站" class="headerlink" title="关于本站"></a>关于本站</h2><h4 id="2021-7-19"><a href="#2021-7-19" class="headerlink" title="2021-7-19"></a>2021-7-19</h4><ol><li>本站的大致结构基本形成，并发布在了github的个人主页上进行测试</li><li>本站采用的是hexo框架-butterfly主题</li><li>本站设置了评论系统，可邮箱通知最新消息</li><li>设置了贡献面板</li><li>不知道了啦……太多了……</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>C语言实现TCP/IP连接</title>
      <link href="/%E6%8A%80%E6%9C%AF/C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0TCPIP%E8%BF%9E%E6%8E%A5/"/>
      <url>/%E6%8A%80%E6%9C%AF/C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0TCPIP%E8%BF%9E%E6%8E%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="C语言实现TCP-IP连接"><a href="#C语言实现TCP-IP连接" class="headerlink" title="C语言实现TCP/IP连接"></a>C语言实现TCP/IP连接</h1><p>利用C语言，实现TCP/IP连接。其中采用CS模式+套接字的方式。    </p><p>先上代码：</p><h3 id="Server-c-服务端"><a href="#Server-c-服务端" class="headerlink" title="Server.c    服务端"></a>Server.c    服务端</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Server.c</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ws2tcpip.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SERVER_PORT 6666</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 套接字连接--全局</span></span><br><span class="line"><span class="keyword">int</span> client;</span><br><span class="line"><span class="comment">// 调用socket函数返回的文件描述符</span></span><br><span class="line"><span class="keyword">int</span> serverSocket;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> buffer[<span class="number">200</span>]; <span class="comment">//存储 发送和接收的信息</span></span><br><span class="line"><span class="keyword">int</span> iDataNum;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化服务端，等待客户端连接</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sockInit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">监听后，一直处于accept阻塞状态，</span></span><br><span class="line"><span class="comment">直到有客户端连接，</span></span><br><span class="line"><span class="comment">当客户端如数quit后，断开与客户端的连接</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//声明两个套接字sockaddr_in结构体变量，分别表示客户端和服务器</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">server_addr</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">clientAddr</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> addr_len = <span class="keyword">sizeof</span>(clientAddr);</span><br><span class="line"></span><br><span class="line"><span class="comment">//必须先初始化</span></span><br><span class="line">WSADATA wsaData;</span><br><span class="line">WSAStartup(MAKEWORD(<span class="number">2</span>, <span class="number">2</span>), &amp;wsaData);</span><br><span class="line"><span class="keyword">if</span> (LOBYTE(wsaData.wVersion) != <span class="number">2</span> || HIBYTE(wsaData.wVersion) != <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;require version fail!&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//socket函数，失败返回-1</span></span><br><span class="line"><span class="comment">//int socket(int domain, int type, int protocol);</span></span><br><span class="line"><span class="comment">//第一个参数表示使用的地址类型，一般都是ipv4，AF_INET</span></span><br><span class="line"><span class="comment">//第二个参数表示套接字类型：tcp：面向连接的稳定数据传输SOCK_STREAM</span></span><br><span class="line"><span class="comment">//第三个参数设置为0</span></span><br><span class="line"><span class="comment">//建立socket</span></span><br><span class="line"><span class="keyword">if</span> ((serverSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)) &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">perror(<span class="string">&quot;socket&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化 server_addr</span></span><br><span class="line"><span class="built_in">memset</span>(&amp;server_addr, <span class="number">0</span>, <span class="keyword">sizeof</span>(server_addr));</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化服务器端的套接字，并用htons和htonl将端口和地址转成网络字节序</span></span><br><span class="line">server_addr.sin_family = AF_INET;</span><br><span class="line">server_addr.sin_port = htons(SERVER_PORT);</span><br><span class="line"></span><br><span class="line"><span class="comment">//ip可是是本服务器的ip，也可以用宏INADDR_ANY代替，代表0.0.0.0，表明所有地址</span></span><br><span class="line">server_addr.sin_addr.s_addr = htonl(INADDR_ANY);</span><br><span class="line"></span><br><span class="line"><span class="comment">//对于bind，accept之类的函数，里面套接字参数都是需要强制转换成(struct sockaddr *)</span></span><br><span class="line"><span class="comment">//bind三个参数：服务器端的套接字的文件描述符，</span></span><br><span class="line"><span class="keyword">if</span> (bind(serverSocket, (struct sockaddr *)&amp;server_addr, <span class="keyword">sizeof</span>(server_addr)) &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">perror(<span class="string">&quot;connect&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置服务器上的socket为监听状态</span></span><br><span class="line"><span class="keyword">if</span> (listen(serverSocket, <span class="number">5</span>) &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">perror(<span class="string">&quot;listen&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n监听端口: %d\n&quot;</span>, SERVER_PORT);</span><br><span class="line"><span class="comment">//调用accept函数后，会进入阻塞状态</span></span><br><span class="line"><span class="comment">//accept返回一个套接字的文件描述符，这样服务器端便有两个套接字的文件描述符，</span></span><br><span class="line"><span class="comment">//serverSocket和client。</span></span><br><span class="line"><span class="comment">//serverSocket仍然继续在监听状态，client则负责接收和发送数据</span></span><br><span class="line"><span class="comment">//clientAddr是一个传出参数，accept返回时，传出客户端的地址和端口号</span></span><br><span class="line"><span class="comment">//addr_len是一个传入-传出参数，传入的是调用者提供的缓冲区的clientAddr的长度，以避免缓冲区溢出。</span></span><br><span class="line"><span class="comment">//传出的是客户端地址结构体的实际长度。</span></span><br><span class="line"><span class="comment">//出错返回-1</span></span><br><span class="line">client = accept(serverSocket, (struct sockaddr *)&amp;clientAddr, (<span class="keyword">socklen_t</span> *)&amp;addr_len);</span><br><span class="line"><span class="keyword">if</span> (client &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">perror(<span class="string">&quot;accept&quot;</span>);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// inet_ntoa ip地址转换函数，将网络字节序IP转换为点分十进制IP</span></span><br><span class="line"><span class="comment">// 表达式：char *inet_ntoa (struct in_addr);</span></span><br><span class="line"><span class="comment">// printf(&quot;IP is %s\n&quot;, inet_ntoa(clientAddr.sin_addr)); //把来访问的客户端的IP地址打出来</span></span><br><span class="line"><span class="comment">// printf(&quot;Port is %d\n\n&quot;, htons(clientAddr.sin_port));</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;host: %s:%d\n\n&quot;</span>, inet_ntoa(clientAddr.sin_addr), htons(clientAddr.sin_port));</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_msg</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 接收数据</span></span><br><span class="line"><span class="built_in">memset</span>(buffer, <span class="number">0</span>, <span class="keyword">sizeof</span>(buffer));</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;等待信息...\n&quot;</span>);</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">iDataNum = recv(client, buffer, <span class="keyword">sizeof</span>(buffer), <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (iDataNum &gt;= <span class="number">0</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">buffer[iDataNum] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;收到的信息：%s\n\n&quot;</span>,buffer);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送信息</span></span><br><span class="line"><span class="built_in">memset</span>(buffer, <span class="number">0</span>, <span class="keyword">sizeof</span>(buffer));</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;请输入发送的内容：&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,&amp;buffer);</span><br><span class="line">        send(client, buffer, <span class="built_in">strlen</span>(buffer), <span class="number">0</span>); <span class="comment">//向服务端发送消息</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">sockInit();</span><br><span class="line">get_msg();</span><br><span class="line">getchar();</span><br><span class="line">close(serverSocket);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Client-c-客户端"><a href="#Client-c-客户端" class="headerlink" title="Client.c    客户端"></a>Client.c    客户端</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Client.c</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ws2tcpip.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SERVER_PORT 6666</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 套接字连接--全局</span></span><br><span class="line"><span class="comment">// 客户端只需要一个套接字文件描述符，用于和服务器通信</span></span><br><span class="line"><span class="keyword">int</span> serverSocket;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> buffer[<span class="number">200</span>]; <span class="comment">//存储 发送的信息</span></span><br><span class="line"><span class="keyword">int</span> iDataNum;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 连接服务端</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sockInit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//描述服务器的socket</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">serverAddr</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//下面代码初始化</span></span><br><span class="line">WSADATA wsaData;</span><br><span class="line">WSAStartup(MAKEWORD(<span class="number">2</span>, <span class="number">2</span>), &amp;wsaData);</span><br><span class="line"><span class="keyword">if</span> (LOBYTE(wsaData.wVersion) != <span class="number">2</span> || HIBYTE(wsaData.wVersion) != <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;require version fail!&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((serverSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)) &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">perror(<span class="string">&quot;socket&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">serverAddr.sin_family = AF_INET;</span><br><span class="line">serverAddr.sin_port = htons(SERVER_PORT);</span><br><span class="line"></span><br><span class="line"><span class="comment">//指定服务器端的ip，本地测试：127.0.0.1</span></span><br><span class="line"><span class="comment">//inet_addr()函数，将点分十进制IP转换成网络字节序IP</span></span><br><span class="line">serverAddr.sin_addr.s_addr = inet_addr(<span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (connect(serverSocket, (struct sockaddr *)&amp;serverAddr, <span class="keyword">sizeof</span>(serverAddr)) &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">perror(<span class="string">&quot;connect&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (sockInit() != <span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n连接成功...\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 发送信息</span></span><br><span class="line"><span class="built_in">memset</span>(buffer, <span class="number">0</span>, <span class="keyword">sizeof</span>(buffer));</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;请输入发送的内容：&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,&amp;buffer);</span><br><span class="line">        send(serverSocket, buffer, <span class="built_in">strlen</span>(buffer), <span class="number">0</span>); <span class="comment">//向服务端发送消息</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收数据</span></span><br><span class="line"><span class="built_in">memset</span>(buffer, <span class="number">0</span>, <span class="keyword">sizeof</span>(buffer));</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;等待信息...\n&quot;</span>);</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">iDataNum = recv(serverSocket, buffer, <span class="keyword">sizeof</span>(buffer), <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (iDataNum &gt;= <span class="number">0</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">buffer[iDataNum] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;收到的信息：%s\n\n&quot;</span>,buffer);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getchar();</span><br><span class="line">close(serverSocket);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中，send()是用来发送数据的，recv()是用来接收数据的</p><p><strong>接收数据</strong>的时候，通常情况下是不知道大小的，所以使用的是缓冲区的大小<em>sizeof(buffer)</em></p><p>但在<strong>发送数据</strong>的时候，是可以知道数据的长度/大小的，所以可以直接用*strlen(buffer)*来获取和确定要发送的长度</p><p>注：直接在cmd用gcc编译时，记得加上 -lwsock32    (当前是Windows 10)</p><p><code>$ gcc .\Server.c -o .\Server.exe -lwsock32</code></p><hr><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>还有一点需要注意的是，我试过：先写好客户端只发送数据，服务端只接收数据</p><p>然后利用Client端 连续不间断地向Server端发送长度较大的数据，这时在Server端打印接收到的数据时，往往会显示（接收）不完全，或许是recv()中的数据并没有被完全读进buffer中去。</p><p>怎么说呢，就像是我Server端要接收一大串的数据，我这一大串(来自recv的)数据还没有读到尾(‘\0’) 内存还没读完，buffer就要被拿去printf了，printf完就被填充全0，准备下一次的数据接收。</p><p>那怎么办呢，要确保Server端完整读取发送过来的数据呀，那我加延时呗 等内存读完呗，延时完再打印和初始化buffer。</p><p>实验结果发现，确实可以，但！这个延时加在Server端却没用，对于Server端来说 每一条语句执行的顺序都是一样的，速度也是相当的，你不可能说加了个延时它就不接收数据了呀，对吧。</p><p>然后我把延时加在了Client端发送那里，确保每次发送都有一段不会太短的时间间隔，这样Server端就能完整读取完数据再处理下一次的接收。</p><p>真是非常的amazing啊，当初我还是搞网安玩加密的时候试出来的，调了半天，以为是因为加密后乱码 发过去了读不出来，结果才发现可能是内存没读完导致的，郁闷了两天（托腮.jpg）</p><p>不过这也只不过是我猜测的啦，真正具体是什么原因导致读不完我还不怎么清楚了啦……(蹲个大佬 我插个眼)</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> 笔记 </tag>
            
            <tag> TCP </tag>
            
            <tag> 网络编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS闭包异步问题</title>
      <link href="/%E6%8A%80%E6%9C%AF/JS%E9%97%AD%E5%8C%85%E5%BC%82%E6%AD%A5%E9%97%AE%E9%A2%98/"/>
      <url>/%E6%8A%80%E6%9C%AF/JS%E9%97%AD%E5%8C%85%E5%BC%82%E6%AD%A5%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="JS闭包异步问题"><a href="#JS闭包异步问题" class="headerlink" title="JS闭包异步问题"></a>JS闭包异步问题</h1><p>假设我们现在想要先执行f2，执行完f2之后在紧跟执行f1。我们应该这样写：👇</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>( <span class="function">()=&gt;</span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">&quot;this is f1&quot;</span>,<span class="keyword">new</span> <span class="built_in">Date</span>());</span><br><span class="line">  &#125;,<span class="number">2000</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params">callback</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>( <span class="function">()=&gt;</span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">&quot;this is f2&quot;</span>,<span class="keyword">new</span> <span class="built_in">Date</span>())</span><br><span class="line">     callback()</span><br><span class="line">  &#125;,<span class="number">2000</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;start time:&quot;</span>,<span class="keyword">new</span> <span class="built_in">Date</span>())</span><br><span class="line">f2(f1)</span><br></pre></td></tr></table></figure><p>这样他会先打印”start time”，过两秒后打印”f2”的时间，再过2s后再打印”f1”</p><p><img src="image-20210713003026939.png" alt="image-20210713003026939"></p><img src="image-20210713003317016.png" alt="image-20210713003317016"  /><hr><p>若换一种写法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>( <span class="function">()=&gt;</span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">&quot;this is f1&quot;</span>,<span class="keyword">new</span> <span class="built_in">Date</span>());</span><br><span class="line">  &#125;,<span class="number">2000</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>( <span class="function">()=&gt;</span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">&quot;this is f2&quot;</span>,<span class="keyword">new</span> <span class="built_in">Date</span>())</span><br><span class="line">  &#125;,<span class="number">2000</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;start time:&quot;</span>,<span class="keyword">new</span> <span class="built_in">Date</span>())</span><br><span class="line"></span><br><span class="line">f2()</span><br><span class="line">f1()</span><br></pre></td></tr></table></figure><p>这样并不能达到异步的效果，它会先打印”start time”，之后在接下来的语句中，它会执行f2()、f1() ，f1打印的时间应该和f2打印的时间是一样的</p><p>解释：这里f1的执行，并不需要等待f2执行完 跳出来之后再执行，这里就像是解析语句一般，解析完“要执行f2()”，之后解析“要执行f1()”，它两之间就几个微秒的间隔</p><p><img src="image-20210713004030715.png" alt="image-20210713004030715"></p><hr><div class="mermaid">sequenceDiagramNote over 主 线: 解析&quot;start time&quot;Note over 主 线: 解析f2()主 线-&gt;&gt;+支线1: 给我去执行f2()Note over 支线1: 执行f2()Note over 主 线: 解析f1()主 线-&gt;&gt;+支线2: 给我去执行f1()Note over 支线2: 执行f1()</div><ol><li><p>主线先解析”start time”</p></li><li><p>主线解析“要执行f2()”，然后把f2的具体内容交给支线1去执行，支线1与主线互不干扰，两者并行</p></li><li><p>主线解析“要执行f1()”，然后把f1的具体内容交给支线2去执行，支线2与主线互不干扰，两者并行</p><p>（与此同时，支线1继续执行f2的内容，理论上应该还没执行完f2  因为主线从解析f2()到解析f1()仅需大概6微秒左右[视芯片而定吧]）</p></li></ol><p>这里用 <code>new Date().getTime()</code> 打印了时间戳，</p><p>“start time” 与f2 相差 2012ms，也就是2s + 12ms</p><p>f2和f1的时间就差了1ms</p><p><img src="image-20210713010648477.png" alt="image-20210713010648477"></p><hr><p>若直接用 <code>new Date().getMilliseconds()</code> 打印ms：</p><p><img src="image-20210713011331809.png" alt="image-20210713011331809"><img src="image-20210713011353347.png" alt="image-20210713011353347"></p><p>大概就是看进位吧？！</p><p>反正就是两者的间隔时间很短，并不会出现执行完f2()在执行f1()的情况</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> JS </tag>
            
            <tag> 异步 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>虚拟机+Ubuntu，搭建hadoop集群</title>
      <link href="/%E6%8A%80%E6%9C%AF/%E8%99%9A%E6%8B%9F%E6%9C%BA+Ubuntu%EF%BC%8C%E6%90%AD%E5%BB%BAhadoop%E9%9B%86%E7%BE%A4/"/>
      <url>/%E6%8A%80%E6%9C%AF/%E8%99%9A%E6%8B%9F%E6%9C%BA+Ubuntu%EF%BC%8C%E6%90%AD%E5%BB%BAhadoop%E9%9B%86%E7%BE%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="一些说明和资源"><a href="#一些说明和资源" class="headerlink" title="一些说明和资源"></a>一些说明和资源</h1><p>虚拟机：VirtualBox-6.1.18<br>Ubuntu：16.04桌面版<br>JDK：<a href="https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html">jdk-8u281-linux-x64.tar.gz</a><br>hadoop：<a href="http://archive.apache.org/dist/hadoop/core/hadoop-2.7.3/hadoop-2.7.3.tar.gz">hadoop2.7.3</a><br>可能用到的资源：<a href="https://download.csdn.net/download/li1055107552/15776196">hadoop-instead</a></p><hr><h2 id="安装虚拟机和Ubuntu16-04"><a href="#安装虚拟机和Ubuntu16-04" class="headerlink" title="安装虚拟机和Ubuntu16.04"></a>安装虚拟机和Ubuntu16.04</h2><p>传送门：<a href="https://blog.csdn.net/li1055107552/article/details/114766651">下载及安装教程</a></p><blockquote><p> 稍有不同的地方：<br><img src="https://img-blog.csdnimg.cn/20210313233828663.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpMTA1NTEwNzU1Mg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p></blockquote><hr><h2 id="安装hadoop"><a href="#安装hadoop" class="headerlink" title="安装hadoop"></a>安装hadoop</h2><br/><h4 id="1-配置虚拟机网卡"><a href="#1-配置虚拟机网卡" class="headerlink" title="1. 配置虚拟机网卡"></a>1. 配置虚拟机网卡</h4><pre><code>     1. 打开VirtualBox     2. 点击右上角 管理 --&gt; 主机网络管理器 --&gt; 创建网卡    </code></pre><p><img src="https://img-blog.csdnimg.cn/img_convert/c8c9b55601207655f98a85d995350e45.png#pic_center" alt="在这里插入图片描述"></p><br/><h4 id="2-配置主机网卡"><a href="#2-配置主机网卡" class="headerlink" title="2. 配置主机网卡"></a>2. 配置主机网卡</h4><p><img src="https://img-blog.csdnimg.cn/img_convert/f47ddb53bc42e835fb6e7a75c4d37d92.png#pic_center" alt="在这里插入图片描述"></p><br/><h4 id="3-进入到Ubuntu"><a href="#3-进入到Ubuntu" class="headerlink" title="3.进入到Ubuntu"></a>3.进入到Ubuntu</h4><p><font size=3>以下操作在 hadoop-master 下完成</font></p><h5 id="3-1-配置hosts文件"><a href="#3-1-配置hosts文件" class="headerlink" title="3.1 配置hosts文件"></a>3.1 配置hosts文件</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vim /etc/hosts</span><br></pre></td></tr></table></figure><blockquote><p>//  配置如下，后面的ipv6部分无需更改：<br/><br><img src="https://img-blog.csdnimg.cn/20210314030323120.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpMTA1NTEwNzU1Mg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p></blockquote><br/><h5 id="3-2-下载和配置Java"><a href="#3-2-下载和配置Java" class="headerlink" title="3.2 下载和配置Java"></a>3.2 下载和配置Java</h5><p>JDK下载：<a href="https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html">官方下载地址</a><br>本地下载：<a href="https://download.csdn.net/download/li1055107552/15773067">jdk-8u281-linux-x64.tar.gz</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 进入到jdk的存放位置 解压</span><br><span class="line">$ tar -xvf jdk-8u281-linux-x64.tar.gz</span><br><span class="line"></span><br><span class="line">// 将文件夹复制到/usr/java 目录下</span><br><span class="line">$ sudo cp -r jdk1.8.0_281/ /usr/java</span><br></pre></td></tr></table></figure><p>接着配置环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vim /etc/profile</span><br></pre></td></tr></table></figure><p>在 profile 中添加以下内容：</p><pre><code>export JAVA_HOME=/usr/javaexport CLASSPATH=.:$JAVA_HOME/lib:$JRE_HOME/lib:$CLASSPATHexport PATH=$JAVA_HOME/bin:$JRE_HOME/bin:$PATHexport JRE_HOME=$JAVA_HOME/jre# 下面是 后面hadoop的环境变量# export HADOOP_HOME=/usr/hadoop# export CLASSPATH=$($HADOOP_HOME/bin/hadoop classpath):$CLASSPATH# export HADOOP_COMMON_LIB_NATIVE_DIR=$HADOOP_HOME/lib/native# export PATH=$PATH:$HADOOP_HOME/bin:$HADOOP_HOME/sbin</code></pre><p>然后是保存 并使profile文件立即生效：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><p>接着可以输入以下命令查看是否安装成功：</p><pre><code>$ java -version</code></pre><p>若能成功打印版本信息则为成功。</p><br/><h5 id="3-3-下载和配置Hadoop"><a href="#3-3-下载和配置Hadoop" class="headerlink" title="3.3 下载和配置Hadoop"></a>3.3 下载和配置Hadoop</h5><p>官方地址：<a href="http://archive.apache.org/dist/hadoop/core/">传送门</a><br>一步到位：<a href="http://archive.apache.org/dist/hadoop/core/hadoop-2.7.3/hadoop-2.7.3.tar.gz">hadoop-2.7.3.tar.gz</a></p><pre><code>整体的布局：NameNode：hadoop-masterDataNode：hadoop-master、hadoop-slave1、hadoop-slave2ResourceManager：hadoop-masterNodeManager：hadoop-master</code></pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 进入到目录下解压</span><br><span class="line">$ tar -xvf hadoop-2.7.3.tar.gz</span><br><span class="line"></span><br><span class="line">// 将文件夹复制到/usr/hadoop 目录下</span><br><span class="line">$ sudo cp -r hadoop-2.7.3/ /usr/hadoop </span><br></pre></td></tr></table></figure><p>配置环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 把上面刚刚Java的环境变量 hadoop部分注释去掉即可</span><br><span class="line">$ sudo vim /etc/profile</span><br><span class="line"></span><br><span class="line">// 同样使profile文件立即生效：</span><br><span class="line">$ <span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><p>接下来需要更改几个文件的内容：</p><p><img src="https://img-blog.csdnimg.cn/20210314021000410.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpMTA1NTEwNzU1Mg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>注：mapred-site.xml 没有此文件，将mapred-site.xml.template复制一份改即可</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">// hadoop-env.sh 将java的目录改为绝对路径，以免启动hadoop时找不到Java目录而报错</span><br><span class="line"># The java implementation to use.</span><br><span class="line">export JAVA_HOME=/usr/java</span><br><span class="line"></span><br><span class="line">// slaves 修改为以下内容，三台主机的名称：</span><br><span class="line">hadoop-master</span><br><span class="line">hadoop-slave1</span><br><span class="line">hadoop-slave2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// core-site.xml</span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:/usr/hadoop/tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://hadoop-master:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// hdfs-site.xml</span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.secondary.http-address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop-master:50090<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.name.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:/usr/hadoop/tmp/dfs/name<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.datanode.data.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:/usr/hadoop/tmp/dfs/data<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// mapred-site.xml</span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop-master:10020<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.webapp.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop-master:19888<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// yarn-site.xml</span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.hostname<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop-master<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.log-aggregation-enable<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.log-dirs<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>$&#123;yarn.log.dir&#125;/userlogs<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">故意写在后面：</span><br><span class="line">懒人专属：当你懒到一定程度时，可以直接利用 hadoop-instead 里的文件替换掉 /usr/.../etc/hadoop 里的文件就好了</span><br></pre></td></tr></table></figure><p>配置好之后，保存并关闭该主机 hadoop-master 。<br>复制另外两台主机，分别名为hadoop-slave1、hadoop-slave2</p><p>复制好之后，启动三台主机。</p><br/><h5 id="3-4-分别更改三台主机的网络配置"><a href="#3-4-分别更改三台主机的网络配置" class="headerlink" title="3.4 分别更改三台主机的网络配置"></a>3.4 分别更改三台主机的网络配置</h5><br/><h5 id="3-4-1-hadoop-master"><a href="#3-4-1-hadoop-master" class="headerlink" title="3.4.1 hadoop-master"></a>3.4.1 hadoop-master</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ifconfig -a</span><br></pre></td></tr></table></figure><p>应该能看到一个网卡是没有ip地址的，那就是需要配置的。（如：enp0s8）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vim /etc/network/interfaces</span><br></pre></td></tr></table></figure><p>在后面添加以下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">auto enp0s8</span><br><span class="line">iface enp0s8 inet static</span><br><span class="line">address 192.168.56.1</span><br><span class="line">netmask 255.255.255.0</span><br></pre></td></tr></table></figure><blockquote><p>// /etc/network/interfaces：<br/><br><img src="https://img-blog.csdnimg.cn/20210314031531869.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpMTA1NTEwNzU1Mg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p></blockquote><p>开启网卡</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ifup enp0s8</span><br></pre></td></tr></table></figure><p>开启后，再次查看状态，应该是有ip地址的，如192.168.56.1</p><br/><h5 id="3-4-2-hadoop-slave1、hadoop-slave2"><a href="#3-4-2-hadoop-slave1、hadoop-slave2" class="headerlink" title="3.4.2 hadoop-slave1、hadoop-slave2"></a>3.4.2 hadoop-slave1、hadoop-slave2</h5><p>更改一下设备名称，不然host不认…</p><p><img src="https://img-blog.csdnimg.cn/20210314032451455.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpMTA1NTEwNzU1Mg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210314032451368.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpMTA1NTEwNzU1Mg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>其他操作与 3.4.1 同理。<br>配置好之后，三台主机之间，应该是可以成功ping通的。</p><br/><h5 id="3-5-配置SSH免密登录"><a href="#3-5-配置SSH免密登录" class="headerlink" title="3.5 配置SSH免密登录"></a>3.5 配置SSH免密登录</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 若没有安装ssh的可以先下载更新一下(所有主机都要)</span><br><span class="line">$ sudo apt-get install openssh-server openssh-client</span><br></pre></td></tr></table></figure><p>回到我们的 hadoop-master 主机上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -P <span class="string">&#x27;&#x27;</span> -f ~/.ssh/id_rsa</span><br><span class="line"></span><br><span class="line">// 分发到不同主机上</span><br><span class="line">$ ssh-copy-id username@hadoop-slave1</span><br><span class="line">$ ssh-copy-id username@hadoop-slave2</span><br><span class="line"></span><br><span class="line">// 本机免密登录</span><br><span class="line">$ <span class="built_in">cd</span> ~/.ssh</span><br><span class="line">$ cat id_rsa.pub &gt;&gt; authorized_keys</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注：链接时提示输入密码，是需要链接的主机的密码，不是本机的密码。<br>连接后，若想要退出链接，可以执行 <code>$exit</code></p><hr><h2 id="启动hadoop"><a href="#启动hadoop" class="headerlink" title="启动hadoop"></a>启动hadoop</h2><p>三台主机都开启后，在 master主机 上执行指令，格式化HDFS文件系统：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hdfs namenode -format</span><br></pre></td></tr></table></figure><p>在master节点启动hadoop集群</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ start-all.sh</span><br><span class="line">或</span><br><span class="line">$ start-dfs.sh</span><br><span class="line">$ start-yarn.sh</span><br></pre></td></tr></table></figure><p>然后可以通过<code>$ jps</code> 查看信息，各主机的信息 应该与上文中 3.3 的整体的布局相一致</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">还可以通过以下命令查看hadoop集群系统的状态：</span><br><span class="line">$ hdfs dfsadmin -report</span><br><span class="line"></span><br><span class="line">或直接打开网页，查看更详细的信息：</span><br><span class="line">http://192.168.56.1:50070</span><br></pre></td></tr></table></figure><hr><h2 id="启动程序"><a href="#启动程序" class="headerlink" title="启动程序"></a>启动程序</h2><p>先跑个demo，算个π</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hadoop jar /usr/hadoop/share/hadoop/mapreduce/hadoop-mapreduce-examples-2.7.3.jar pi 10 10</span><br></pre></td></tr></table></figure><p>第一次执行，时间会较长，可能需要2-5分钟</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 试过一次好像启动的时候报错了，说要把这个关掉，先写在这吧：</span><br><span class="line">$ hdfs dfsadmin -safemode leave</span><br></pre></td></tr></table></figure><br/><p>其他：（我在另一本书上看到的，大家也可以拿来试着跑一下）</p><ul><li>日志分析：<br>  github：<a href="https://github.com/bdintro/bdintro.git">https://github.com/bdintro/bdintro.git</a><br> 编译源代码采用mvn package，测试数据为hadoop-user-datanode-dell119.log.zip<br> 在测试前先把对应数据上传到HDFS集群中，把使用mvn package编译好的jar包 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 上传日志到hadoop</span><br><span class="line">$ hadoop fs -copyFromLocal hadoop-yangyaru-datanode-dell119.log /</span><br><span class="line"></span><br><span class="line">// 启动</span><br><span class="line">$ hadoop jar 打包好的jar包路径/bigdata-0.0.1.jar bigdata.bigdaba.Grep WARN 需分析的日志路径/hadoop-user-datanode-dell119.log 结果输出的路径/output</span><br></pre></td></tr></table></figure></li><li>交通流量分析：<br>   github：<a href="https://github.com/bdintro/bdintro.git">https://github.com/bdintro/bdintro.git</a><br>   详细的交通流量数据格式描述如网站所述：<a href="https://www.kaggle.com/jana36/us-traffic-violations-montgomery-county-poliet">https://www.kaggle.com/jana36/us-traffic-violations-montgomery-county-poliet</a><br>  编译源代码采用mvn package，测试数据为Traffic_Violations.csv.zip<br>  在测试前先把对应数据上传到HDFS集群中，把使用mvn package编译好的jar包  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 上传交通记录到hadoop</span><br><span class="line">$ hadoop fs -copyFromLocal Traffic_Violations.csv /</span><br><span class="line"></span><br><span class="line">// 启动</span><br><span class="line">$ hadoop jar 打包好的jar包路径/bigdata-0.0.1.jar bigdata.bigdaba.TrafficTotal WARN 需分析的日志路径/Traffic_Violations.csv 结果输出的路径/output</span><br></pre></td></tr></table></figure></li></ul><br/><hr><h2 id="完"><a href="#完" class="headerlink" title="完"></a>完</h2>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 虚拟机 </tag>
            
            <tag> Linux </tag>
            
            <tag> Hadoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VirtualBox安装Ubuntu16.04</title>
      <link href="/%E6%8A%80%E6%9C%AF/VirtualBox%E5%AE%89%E8%A3%85Ubuntu16.04/"/>
      <url>/%E6%8A%80%E6%9C%AF/VirtualBox%E5%AE%89%E8%A3%85Ubuntu16.04/</url>
      
        <content type="html"><![CDATA[<h1 id="VirtualBox安装Ubuntu16-04"><a href="#VirtualBox安装Ubuntu16-04" class="headerlink" title="VirtualBox安装Ubuntu16.04"></a>VirtualBox安装Ubuntu16.04</h1><hr><h2 id="一、VirtualBox的安装"><a href="#一、VirtualBox的安装" class="headerlink" title="一、VirtualBox的安装"></a>一、VirtualBox的安装</h2><p>下载地址：<a href="https://download.virtualbox.org/virtualbox/">官方下载地址</a><br>一键下载：<a href="https://download.virtualbox.org/virtualbox/6.1.18/VirtualBox-6.1.18-142142-Win.exe">VirtualBox-6.1.18-142142-Win.exe</a></p><p>然后就是傻瓜式安装……</p><hr><h2 id="二、安装Ubuntu16-04"><a href="#二、安装Ubuntu16-04" class="headerlink" title="二、安装Ubuntu16.04"></a>二、安装Ubuntu16.04</h2><p>之前VMware上我也出过一篇，大家直接去看就好了。</p><p>传送门：<a href="https://blog.csdn.net/li1055107552/article/details/108478620">虚拟机上安装Ubuntu16.04及ROS</a></p><blockquote><p><img src="https://img-blog.csdnimg.cn/20210313235018808.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpMTA1NTEwNzU1Mg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述">点击下一步</p></blockquote><blockquote><p><img src="https://img-blog.csdnimg.cn/20210313235220779.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpMTA1NTEwNzU1Mg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述">这里看自己的配置，建议最小2GB，我这里是4GB</p></blockquote><blockquote><p>磁盘：<img src="https://img-blog.csdnimg.cn/20210313235414288.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpMTA1NTEwNzU1Mg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述">下一步<img src="https://img-blog.csdnimg.cn/20210313235508195.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpMTA1NTEwNzU1Mg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述">下一步<img src="https://img-blog.csdnimg.cn/2021031323553961.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpMTA1NTEwNzU1Mg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述">这里看自己吧<img src="https://img-blog.csdnimg.cn/20210313235623128.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpMTA1NTEwNzU1Mg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述">建议20GB，10GB也不是不行</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 虚拟机 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>虚拟机上安装Ubuntu及ROS</title>
      <link href="/%E6%8A%80%E6%9C%AF/%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%8A%E5%AE%89%E8%A3%85Ubuntu16.04%E5%8F%8AROS/"/>
      <url>/%E6%8A%80%E6%9C%AF/%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%8A%E5%AE%89%E8%A3%85Ubuntu16.04%E5%8F%8AROS/</url>
      
        <content type="html"><![CDATA[<h1 id="虚拟机上安装Ubuntu及ROS"><a href="#虚拟机上安装Ubuntu及ROS" class="headerlink" title="虚拟机上安装Ubuntu及ROS"></a>虚拟机上安装Ubuntu及ROS</h1><p>使用的虚拟机 VMware为15.x的版本<br>Ubuntu的版本为16.04的版本</p><hr><h2 id="Ubuntu的安装"><a href="#Ubuntu的安装" class="headerlink" title="Ubuntu的安装"></a>Ubuntu的安装</h2><ul><li><p>安装好虚拟机VMware</p></li><li><p>下载 Ubuntu-16.04.7-desktop-amd64 镜像源</p><blockquote><p>官网：<a href="https://releases.ubuntu.com/16.04/">https://releases.ubuntu.com/16.04/</a><br>官方镜像源：<a href="https://releases.ubuntu.com/16.04/ubuntu-16.04.7-desktop-amd64.iso">点击下载官方镜像源</a><br>阿里云镜像源：<a href="http://mirrors.aliyun.com/ubuntu-releases/16.04/ubuntu-16.04.7-desktop-amd64.iso">点击下载阿里云镜像源</a><br>该文档的PDF：<a href="https://download.csdn.net/download/li1055107552/12829008">下载</a></p></blockquote></li><li><p>安装Ubuntu-16.04.7-desktop-amd64</p></li></ul><blockquote><p><img src="https://img-blog.csdnimg.cn/20200908223146462.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpMTA1NTEwNzU1Mg==,size_16,color_FFFFFF,t_70#pic_center" alt="选择自定义，点击下一步"><br>选择自定义，点击下一步</p></blockquote><blockquote><p><img src="https://img-blog.csdnimg.cn/20200908224802632.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpMTA1NTEwNzU1Mg==,size_16,color_FFFFFF,t_70#pic_center" alt="点击下一步"><br>点击下一步</p></blockquote><blockquote><p><img src="https://img-blog.csdnimg.cn/20200908225124372.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpMTA1NTEwNzU1Mg==,size_16,color_FFFFFF,t_70#pic_center" alt="选择“稍后安装操作系统”，点击下一步"><br>选择“稍后安装操作系统”，点击下一步</p></blockquote><blockquote><p><img src="https://img-blog.csdnimg.cn/20200908225215382.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpMTA1NTEwNzU1Mg==,size_16,color_FFFFFF,t_70#pic_center" alt="选择“Linux”，版本选择“Ubuntu 64位”，点击下一步"><br>选择“Linux”，版本选择“Ubuntu 64位”，点击下一步</p></blockquote><blockquote><p><img src="https://img-blog.csdnimg.cn/20200908225314218.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpMTA1NTEwNzU1Mg==,size_16,color_FFFFFF,t_70#pic_center" alt="选择该虚拟机的安装位置，点击下一步"><br>选择该虚拟机的安装位置，点击下一步</p></blockquote><blockquote><p><img src="https://img-blog.csdnimg.cn/20200908225350572.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpMTA1NTEwNzU1Mg==,size_16,color_FFFFFF,t_70#pic_center" alt="Alt"><img src="https://img-blog.csdnimg.cn/20200908225412144.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpMTA1NTEwNzU1Mg==,size_16,color_FFFFFF,t_70#pic_center" alt="Alt"><br>根据自己的电脑，选择相应的配置，建议不低于2核2G内存</p></blockquote><blockquote><p><img src="https://img-blog.csdnimg.cn/20200908225502494.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpMTA1NTEwNzU1Mg==,size_16,color_FFFFFF,t_70#pic_center" alt="这里选择NAT即可"><br>这里选择NAT即可。（安装好Ubuntu之后，选择右上角，点击“自动以太网”即可）</p></blockquote><blockquote><p><img src="https://img-blog.csdnimg.cn/20200908225548299.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpMTA1NTEwNzU1Mg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/20200908225558141.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpMTA1NTEwNzU1Mg==,size_16,color_FFFFFF,t_70#pic_center" alt="Alt"><br>这里选择默认推荐的即可，点击下一步</p></blockquote><blockquote><p><img src="https://img-blog.csdnimg.cn/20200908230931724.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpMTA1NTEwNzU1Mg==,size_16,color_FFFFFF,t_70#pic_center" alt="Alt"><img src="https://img-blog.csdnimg.cn/20200908231010709.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpMTA1NTEwNzU1Mg==,size_16,color_FFFFFF,t_70#pic_center" alt="Alt"><br>如图，点击下一步</p></blockquote><blockquote><p><img src="https://img-blog.csdnimg.cn/20200908231311332.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpMTA1NTEwNzU1Mg==,size_16,color_FFFFFF,t_70#pic_center" alt="Alt"><img src="https://img-blog.csdnimg.cn/2020090823133270.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpMTA1NTEwNzU1Mg==,size_16,color_FFFFFF,t_70#pic_center" alt="Alt"><br>选择好磁盘文件存储的位置之后，点击下一步，即可看到大致的配置信息，点击完成</p></blockquote><blockquote><p><img src="https://img-blog.csdnimg.cn/20200908232849729.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpMTA1NTEwNzU1Mg==,size_16,color_FFFFFF,t_70#pic_center" alt="Alt"><br>点击完成后，点击该虚拟机的CD/DVD</p></blockquote><blockquote><p><img src="https://img-blog.csdnimg.cn/2020090823293182.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpMTA1NTEwNzU1Mg==,size_16,color_FFFFFF,t_70#pic_center" alt="Alt"><br>    - 选择CD/DVD（SATA），选择“使用ISO映像文件”，选择上一步骤下载的镜像源<br>    - 同时您还可以把“打印机”移除<br>    - 设置好之后，点击确定<br>    - 点击 开启此虚拟机</p></blockquote><blockquote><p><img src="https://img-blog.csdnimg.cn/20200908233040219.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpMTA1NTEwNzU1Mg==,size_16,color_FFFFFF,t_70#pic_center" alt="Alt"><br>    拉到最下面，选择中文（简体）</p></blockquote><blockquote><p><img src="https://img-blog.csdnimg.cn/20200908233114680.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpMTA1NTEwNzU1Mg==,size_16,color_FFFFFF,t_70#pic_center" alt="Alt"><br>    点击“安装Ubuntu”</p></blockquote><blockquote><p><img src="https://img-blog.csdnimg.cn/20200908233423384.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpMTA1NTEwNzU1Mg==,size_16,color_FFFFFF,t_70#pic_center" alt="Alt"><br>    不做选择，点击“继续”</p></blockquote><blockquote><p><img src="https://img-blog.csdnimg.cn/20200908233510512.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpMTA1NTEwNzU1Mg==,size_16,color_FFFFFF,t_70#pic_center" alt="Alt"><br>    选择“清除整个磁盘并安装Ubuntu”，点击现在安装</p></blockquote><blockquote><p><img src="https://img-blog.csdnimg.cn/20200908233625651.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpMTA1NTEwNzU1Mg==,size_16,color_FFFFFF,t_70#pic_center" alt="Alt"><br>    弹出提示，点击继续</p></blockquote><blockquote><p><img src="https://img-blog.csdnimg.cn/20200908233648901.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpMTA1NTEwNzU1Mg==,size_16,color_FFFFFF,t_70#pic_center" alt="Alt"><br>时间选择shanghai即可，点击继续</p></blockquote><blockquote><p><img src="https://img-blog.csdnimg.cn/20200908233715890.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpMTA1NTEwNzU1Mg==,size_16,color_FFFFFF,t_70#pic_center" alt="Alt"><br>选择“汉语-汉语”，点击继续</p></blockquote><blockquote><p><img src="https://img-blog.csdnimg.cn/20200908233742933.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpMTA1NTEwNzU1Mg==,size_16,color_FFFFFF,t_70#pic_center" alt="Alt"><br>设置好用户名以及密码，点击继续</p></blockquote><blockquote><p><img src="https://img-blog.csdnimg.cn/20200908233811864.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpMTA1NTEwNzU1Mg==,size_16,color_FFFFFF,t_70#pic_center" alt="Alt"><img src="https://img-blog.csdnimg.cn/20200908233841416.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpMTA1NTEwNzU1Mg==,size_16,color_FFFFFF,t_70#pic_center" alt="Alt"><br>    - 稍等片刻，即可安装完成<br>    - 安装完毕，点击现在重启。（若出现一行命令行后没反应，关闭虚拟机重启）</p></blockquote><blockquote><p><img src="https://img-blog.csdnimg.cn/20200908234032864.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpMTA1NTEwNzU1Mg==,size_16,color_FFFFFF,t_70#pic_center" alt="Alt"><br>现在已经安装好Ubuntu了，登录刚刚设置的密码即可。</p></blockquote><blockquote><p><img src="https://img-blog.csdnimg.cn/20200908234108519.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpMTA1NTEwNzU1Mg==,size_16,color_FFFFFF,t_70#pic_center" alt="Alt"><br>    成功进入到Ubuntu主界面，您可以把这几项从启动器解锁</p></blockquote><blockquote><p><img src="https://img-blog.csdnimg.cn/20200908234149401.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpMTA1NTEwNzU1Mg==,size_16,color_FFFFFF,t_70#pic_center" alt="Alt"><br>打开第一项的搜索，打开终端</p></blockquote><blockquote><p><img src="https://img-blog.csdnimg.cn/20200908234204463.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpMTA1NTEwNzU1Mg==,size_16,color_FFFFFF,t_70#pic_center" alt="Alt"><br>打开一个终端，并锁定到启动器</p></blockquote><blockquote><p>运行终端，输入su命令，当你输入刚才登录的密码时发现su：认证失败。<br>你可以输入 $ sudo passwd root     更新密码（可以与原来相同）<br><img src="https://img-blog.csdnimg.cn/20200908234432239.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpMTA1NTEwNzU1Mg==,size_16,color_FFFFFF,t_70#pic_center" alt="Alt"><br>设置完成后，在此输入su，输入密码即可认证成功。</p></blockquote><blockquote><p><img src="https://img-blog.csdnimg.cn/20200908234530775.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpMTA1NTEwNzU1Mg==,size_16,color_FFFFFF,t_70#pic_center" alt="Alt"><br>接下来打开 设置—系统 软件和更新，如图设置好即可。</p></blockquote><p>届时，你的Ubuntu 已经完全配置好了。</p><hr><h2 id="ROS的安装"><a href="#ROS的安装" class="headerlink" title="ROS的安装"></a>ROS的安装</h2><ol><li>首先添加ROS的镜像源（此处使用‘中国科学技术大学’的镜像源）</li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> sudo sh –c <span class="string">&#x27;. /etc/lsb-release &amp;&amp; echo &quot;deb http://mirrors.ustc.edu.cn/ros/ubuntu/ $DISTRIB_CODENAME main&quot; &gt; /etc/apt/sources.list.d/ros-latest.list&#x27;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>添加密钥</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-key adv --keyserver hkp://ha.pool.sks-keyservers.net:80 --recv-key 421C365BD9FF1F717815A3895523BAEEB01FA116</span><br></pre></td></tr></table></figure><blockquote><p><img src="https://img-blog.csdnimg.cn/20200909233036934.png#pic_center" alt="Alt"></p></blockquote><ol start="3"><li>更新软件源<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> sudo apt<span class="literal">-get</span> update</span><br></pre></td></tr></table></figure><blockquote><p><img src="https://img-blog.csdnimg.cn/20200909233257485.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpMTA1NTEwNzU1Mg==,size_16,color_FFFFFF,t_70#pic_center" alt="Alt"><br>接下来就是漫长的等待.. …（有条件的可以连个VPN，会快很多）</p></blockquote></li></ol><blockquote><p>若上方的 ‘ $ sudo apt-get update ‘ 更新失败了，<br>可以打开“设置-系统 软件和更新”，随意勾选一项 然后提示输入密码，接着再还原勾选的选项 点击“关闭”，即会提示以下信息<br><img src="https://img-blog.csdnimg.cn/20200909233705924.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpMTA1NTEwNzU1Mg==,size_16,color_FFFFFF,t_70#pic_center" alt="Alt"><br>保证联网后，点击重新载入 便会出现如下界面。只需等待自动更新即可。<br><img src="https://img-blog.csdnimg.cn/20200909233824310.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpMTA1NTEwNzU1Mg==,size_16,color_FFFFFF,t_70#pic_center" alt="Alt"><br>4. 安装ROS桌面完整版</p></blockquote><p>执行完上面的步骤后，执行命令安装ROS的桌面完整版</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> sudo apt<span class="literal">-get</span> install ros<span class="literal">-kinetic</span><span class="literal">-desktop</span><span class="literal">-full</span></span><br></pre></td></tr></table></figure><p>可能有包无法下载，所以执行完之后，输入命令</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> sudo apt<span class="literal">-get</span> install ros<span class="literal">-kinetic</span><span class="literal">-desktop</span><span class="literal">-full</span> –fix<span class="literal">-missing</span></span><br></pre></td></tr></table></figure><p>将检查是否有漏的包，并且自动进行相关的设置</p><blockquote><p><img src="https://img-blog.csdnimg.cn/20200909234101581.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpMTA1NTEwNzU1Mg==,size_16,color_FFFFFF,t_70#pic_center" alt="Alt"><br>5. 初始化rosdep</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> sudo rosdep init</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> rosdep update</span><br></pre></td></tr></table></figure><blockquote><p><img src="https://img-blog.csdnimg.cn/20200909234436782.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpMTA1NTEwNzU1Mg==,size_16,color_FFFFFF,t_70#pic_center" alt="Alr"><img src="https://img-blog.csdnimg.cn/20200909234446771.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpMTA1NTEwNzU1Mg==,size_16,color_FFFFFF,t_70#pic_center" alt="Alt"></p></blockquote><ol start="6"><li>设置环境变量</li></ol><p>（默认）终端为bash的：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> <span class="built_in">echo</span> <span class="string">&quot;source /opt/ros/kinetic/setup.bash&quot;</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="variable">$</span> source ~/.bashrc</span><br></pre></td></tr></table></figure><p>zsh终端的：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> <span class="built_in">echo</span> <span class="string">&quot;source /opt/ros/kinetic/setup.zsh&quot;</span> &gt;&gt; ~/.zshrc</span><br><span class="line"><span class="variable">$</span> source ~/.zshrc</span><br></pre></td></tr></table></figure><blockquote><p>若不知道自己是什么终端的，可以输入 <code>$ env</code> 查看<br><img src="https://img-blog.csdnimg.cn/20200909234808788.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpMTA1NTEwNzU1Mg==,size_16,color_FFFFFF,t_70#pic_center" alt="Alt"><br>7. （选）你还可以安装 rosinsall  ROS中的一个常用工具，来便于后续的开发</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> sudo apt<span class="literal">-get</span> install python<span class="literal">-rosinstall</span> python<span class="literal">-rosinstall</span><span class="literal">-generator</span> python<span class="literal">-wstool</span> <span class="built_in">build-essential</span></span><br></pre></td></tr></table></figure><blockquote><p><img src="https://img-blog.csdnimg.cn/20200909235002169.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpMTA1NTEwNzU1Mg==,size_16,color_FFFFFF,t_70#pic_center" alt="Alt"></p></blockquote><p><strong>附：<code>$ apt-cache search package</code>   可以用来查询是否已经安装某个package</strong></p><p> <strong>到此，ROS 也已经安装完成了。</strong></p><p>输入 <strong><code>$ roscore</code></strong>  即可启动ROS了</p><blockquote><p><img src="https://img-blog.csdnimg.cn/20200909235148976.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpMTA1NTEwNzU1Mg==,size_16,color_FFFFFF,t_70#pic_center" alt="Alt"></p></blockquote><hr><h2 id="运行小海龟"><a href="#运行小海龟" class="headerlink" title="运行小海龟"></a>运行小海龟</h2><ol><li><p>启动ROS。先打开一个终端，然后输入命令：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> roscore</span><br></pre></td></tr></table></figure></li><li><p>启动turtlesim仿真节点。再打开一个终端，输入命令：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> rosrun turtlesim turtlesim_node</span><br></pre></td></tr></table></figure></li><li><p>再打开一个终端，使得可以用键盘上的方向键操控小乌龟：</p></li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> rosrun turtlesim turtle_teleop_key</span><br></pre></td></tr></table></figure><blockquote><p><img src="https://img-blog.csdnimg.cn/20200909235510599.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpMTA1NTEwNzU1Mg==,size_16,color_FFFFFF,t_70#pic_center" alt="Alt"></p></blockquote><h3 id="到此，你的ROS已经能够正常运行啦！"><a href="#到此，你的ROS已经能够正常运行啦！" class="headerlink" title="到此，你的ROS已经能够正常运行啦！"></a>到此，你的ROS已经能够正常运行啦！</h3><p><strong>开始进阶学习吧~</strong> </p><hr>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 虚拟机 </tag>
            
            <tag> Linux </tag>
            
            <tag> ROS </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
